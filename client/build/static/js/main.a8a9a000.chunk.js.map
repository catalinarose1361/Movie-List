{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","title","genre","year","movies","setMovies","movie","setMovie","handleChange","e","target","name","value","prevInput","useEffect","fetch","then","res","ok","json","jsonRes","className","onChange","onClick","preventDefault","alert","newMovie","axios","post","map","id","_id","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA6FeA,MAzFf,WAGE,MAA4BC,mBAAS,CACnC,CACEC,MAAO,IACPC,MAAO,IACPC,KAAM,OAJV,mBAAOC,EAAP,KAAeC,EAAf,KASA,EAA0BL,mBACxB,CACEC,MAAO,IACPC,MAAO,IACPC,KAAM,MAJV,mBAAOG,EAAP,KAAcC,EAAd,KAkBA,SAASC,EAAaC,GACpB,MAAsBA,EAAEC,OAAjBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACbL,GAAS,SAAAM,GACP,kCAEOA,GAFP,kBAGKF,EAAOC,OA2BhB,OA3CAE,qBAAU,WACRC,MAAM,WAAWC,MAAK,SAAAC,GACpB,GAAGA,EAAIC,GACL,OAAOD,EAAIE,UAGZH,MAAK,SAAAI,GAAO,OAAIf,EAAUe,SAsC7B,sBAAKC,UAAU,MAAf,UACE,2CACA,iCAEE,uBAAOC,SAAUd,EAAcG,KAAK,QAAQC,MAAON,EAAML,QACzD,uBAAOqB,SAAUd,EAAcG,KAAK,QAAQC,MAAON,EAAMJ,QACzD,uBAAOoB,SAAUd,EAAcG,KAAK,OAAOC,MAAON,EAAMH,OACxD,wBAAQoB,QA5Bd,SAAkBd,GAChBA,EAAEe,iBACFC,MAAM,eAEN,IAAMC,EAAW,CACfzB,MAAOK,EAAML,MACbC,MAAOI,EAAMJ,MACbC,KAAMG,EAAMH,MAGdwB,IAAMC,KAAK,YAAaF,IAkBpB,0BAEDtB,EAAOyB,KAAI,SAAAvB,GACV,OACE,gCACE,6BAAKA,EAAML,QACX,4BAAIK,EAAMJ,QACV,4BAAII,EAAMH,OACV,wBAAQoB,QAAS,kBAvBNO,EAuBwBxB,EAAMyB,IAtBjDJ,IAAMK,OAAO,WAAaF,QAC1BL,MAAM,iBAFR,IAAqBK,GAuBX,8BCvEGG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a8a9a000.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\nimport axios from \"axios\"\nimport './App.css';\n\nfunction App() {\n  //using state which at first is empty but soon will store data collected from our MongoDB \n  // note the array of objects\n  const [movies, setMovies] = useState([\n    {\n      title: \" \",\n      genre: \" \",\n      year: \" \"\n    }\n  ])\n  //saves data to be stored in our database\n  // note only one object\n  const [movie, setMovie] = useState(\n    {\n      title: \" \",\n      genre: \" \",\n      year: \" \",\n    }\n  )\n  //fetch the data from the route and return a json\n  useEffect(() => {\n    fetch('/movies').then(res => {\n      if(res.ok) {\n        return res.json()\n      }\n      //take json response and set state equal to the json response\n    }).then(jsonRes => setMovies(jsonRes))\n  })\n  //handleChange tracks what is being typed \n  // 'e' has two peices of data, the name and value of inputs\n  function handleChange(e) {\n    const {name, value} = e.target;\n    setMovie(prevInput => {\n      return(\n        {\n          ...prevInput,\n          [name]: value\n        }\n      )\n\n    })\n  }\n\n  function addMovie(e) {\n    e.preventDefault();\n    alert(\"movie added\")\n    //gets values from state\n    const newMovie = {\n      title: movie.title,\n      genre: movie.genre,\n      year: movie.year\n    }\n    //posts our newMovie variable to proxy\n    axios.post('/newMovie', newMovie)\n  }\n  //this function gets called in the onClick for delete\n  function deleteMovie(id){\n    axios.delete('/delete/' + id)\n    alert(\"movie deleted\")\n  }\n\n// input names are required to parse from body req in our server\n//value is set to whatever value was saved in state for movie\n  return (\n    <div className=\"App\">\n      <h1>Add Movie</h1>\n      <form>\n        \n        <input onChange={handleChange} name=\"title\" value={movie.title}></input>\n        <input onChange={handleChange} name=\"genre\" value={movie.genre}></input>\n        <input onChange={handleChange} name=\"year\" value={movie.year}></input>\n        <button onClick={addMovie}>ADD MOVIE</button>\n      </form>\n      {movies.map(movie => {\n        return (\n          <div>\n            <h1>{movie.title}</h1>\n            <p>{movie.genre}</p>\n            <p>{movie.year}</p>\n            <button onClick={() => deleteMovie(movie._id)}>DELETE</button>\n          </div>\n        \n        )\n      })}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}